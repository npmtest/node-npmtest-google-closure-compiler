{"/home/travis/build/npmtest/node-npmtest-google-closure-compiler/test.js":"/* istanbul instrument in package npmtest_google_closure_compiler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-closure-compiler/lib.npmtest_google_closure_compiler.js":"/* istanbul instrument in package npmtest_google_closure_compiler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_google_closure_compiler = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_google_closure_compiler = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-google-closure-compiler/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-google-closure-compiler && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_google_closure_compiler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_google_closure_compiler\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_google_closure_compiler.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_google_closure_compiler.rollup.js'] =\n            local.assetsDict['/assets.npmtest_google_closure_compiler.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_google_closure_compiler.__dirname +\n                    '/lib.npmtest_google_closure_compiler.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-closure-compiler/google-closure-compiler/index.js":"/*\n * Copyright 2015 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Nodejs plugins and build tools for Google Closure Compiler\n *\n * @author Chad Killingsworth (chadkillingsworth@gmail.com)\n */\n\n'use strict';\n\nvar grunt_plugin = require('./lib/grunt');\nvar gulp_plugin = require('./lib/gulp');\nvar Compiler = require('./lib/node/closure-compiler');\n\nmodule.exports = {\n  grunt: grunt_plugin,\n  compiler: Compiler,\n  gulp: gulp_plugin\n};\n","/home/travis/build/npmtest/node-npmtest-google-closure-compiler/google-closure-compiler/lib/grunt/index.js":"/*\n * Copyright 2015 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Grunt task for closure-compiler.\n * The task is simply a grunt wrapper for the gulp plugin. The gulp plugin\n * is used to stream multiple input files in via stdin. This alleviates\n * problems with the windows command shell which has restrictions on the\n * length of a command.\n *\n * @author Chad Killingsworth (chadkillingsworth@gmail.com)\n */\n\n'use strict';\n\nmodule.exports = function(grunt, extraArguments) {\n  var chalk = require('chalk');\n  var VinylStream = require('./vinyl-stream');\n  var fs = require('fs');\n  var path = require('path');\n  var gulpCompiler = require('../gulp')({extraArguments: extraArguments});\n  var Transform = require('stream').Transform;\n  var gulpCompilerOptions = {\n    streamMode: 'IN',\n    logger: grunt.log,\n    pluginName: 'grunt-google-closure-compiler',\n    requireStreamInput: false\n  };\n\n  /**\n   * @param {Array<string>}|null} files\n   * @param {Object<string,string|boolean|Array<string>>|Array<string>} options\n   * @return {Promise}\n   */\n  function compilationPromise(files, options) {\n    var hadError = false;\n    function logFile(cb) {\n      // If an error was encoutered, it will have already been logged\n      if (!hadError) {\n        if (options.js_output_file) {\n          grunt.log.ok(chalk.cyan(options.js_output_file) + ' created');\n        } else {\n          grunt.log.ok('Compilation succeeded');\n        }\n      }\n      cb();\n    }\n\n    var loggingStream = new Transform({\n      objectMode: true,\n      transform: function() {},\n      flush: logFile\n    });\n\n    return new Promise(function(resolve, reject) {\n      var stream;\n      if (files) {\n        // Source files were provided by grunt. Read these\n        // in to a stream of vinyl files and pipe them through\n        // the compiler task\n        stream = new VinylStream(files, {base: process.cwd()})\n            .pipe(gulpCompiler(options, gulpCompilerOptions));\n      } else {\n        // No source files were provided. Assume the options specify\n        // --js flags and invoke the compiler without any grunt inputs.\n        // Manually end the stream to force compilation to begin.\n        stream = gulpCompiler(options, gulpCompilerOptions);\n        stream.end();\n      }\n\n      stream.on('error', function(err) {\n        hadError = true;\n        reject(err);\n      });\n      stream.on('end', function(err) {\n        resolve();\n      });\n\n      stream.pipe(loggingStream);\n      stream.resume(); //logging stream doesn't output files, so we have to manually resume;\n    });\n  }\n\n  function closureCompilerGruntTask() {\n    var taskObject = this;\n    var asyncDone = this.async();\n    var compileTasks = [];\n\n    function getCompilerOptions() {\n      var opts = taskObject.options({\n        args: undefined\n      });\n\n      var args = opts.args;\n\n      delete opts.args;\n\n      return {\n        args: args,\n        compilerOpts: opts\n      }\n    }\n\n    // Invoke the compiler once for each set of source files\n    taskObject.files.forEach(function (f) {\n      var options = getCompilerOptions();\n\n      var src = f.src.filter(function (filepath) {\n        if (!grunt.file.exists(filepath)) {\n          grunt.log.warn('Source file ' + chalk.cyan(filepath) + ' not found');\n          return false;\n        }\n        return true;\n      });\n\n      // Require source files\n      if (src.length === 0) {\n        grunt.log.warn('Destination ' + chalk.cyan(f.dest) +\n            ' not written because src files were empty');\n        return;\n      } else {\n        options.compilerOpts.js_output_file = f.dest;\n      }\n\n      compileTasks.push(compilationPromise(src, options.args || options.compilerOpts)\n          .then(function () {}, function(err) {\n            throw err;\n          }));\n    });\n\n    // If the task was invoked without any files provided by grunt, assume that\n    // --js flags are present and we want to run the compiler anyway.\n    if (taskObject.files.length === 0) {\n      var options = getCompilerOptions();\n      compileTasks.push(compilationPromise(null, options.args || options.compilerOpts));\n    }\n\n    // Multiple invocations of the compiler can occur for a single task target. Wait until\n    // they are all completed before calling the \"done\" method.\n    Promise.all(compileTasks).then(function () {\n      asyncDone();\n    }, function () {\n      grunt.fail.warn('Compilation error');\n      asyncDone();\n    });\n  }\n\n  grunt.registerMultiTask('closure-compiler',\n      'Minify files with Google Closure Compiler',\n      closureCompilerGruntTask);\n\n  return closureCompilerGruntTask;\n};\n","/home/travis/build/npmtest/node-npmtest-google-closure-compiler/google-closure-compiler/lib/gulp/index.js":"/*\n * Copyright 2015 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Gulp task for closure-compiler. Multiplexes input\n * files into a json encoded stream which can be piped into closure-compiler.\n * Each json file object includes the contents, path and optionally sourcemap\n * for every input file.\n *\n * Closure-compiler will return the same style string via standard-out which\n * is then converted back to vinyl files.\n *\n * @author Chad Killingsworth (chadkillingsworth@gmail.com)\n */\n\n'use strict';\n\n/**\n * @param {Object<string,string>} initOptions\n * @return {function(Object<string,string>|Array<string>):Object}\n */\nmodule.exports = function(initOptions) {\n  var filesToJson = require('./concat-to-json');\n  var jsonToVinyl = require('./json-to-vinyl');\n  var Compiler = require('../node/closure-compiler');\n  var stream = require('stream');\n  /** @const */\n  var PLUGIN_NAME = 'gulp-google-closure-compiler';\n\n  var extraCommandArguments = initOptions ? initOptions.extraArguments : undefined;\n  var applySourceMap = require('vinyl-sourcemaps-apply');\n  var path = require('path');\n  var chalk = require('chalk');\n  var File = require('vinyl');\n\n  /** @constructor */\n  function CustomError(plugin, msg) {\n    var superError = Error.call(this) || this;\n    Error.captureStackTrace(superError, this.constructor);\n    superError.name = 'Error';\n    superError.message = msg;\n    return superError;\n  }\n  CustomError.prototype = Object.create(Error.prototype);\n  CustomError.prototype.name = 'Error';\n\n  var PluginError;\n  try {\n    PluginError = require('gulp-util').PluginError;\n  } catch(e) {\n    PluginError = CustomError;\n  }\n\n  var gulpLog;\n  try {\n    gulpLog = require('gulp-util').log;\n  } catch(e) {\n    gulpLog = console;\n  }\n\n  function CompilationStream(compilationOptions, pluginOptions) {\n    stream.Transform.call(this, {objectMode: true});\n\n    pluginOptions = pluginOptions || {};\n\n    this.compilationOptions_ = compilationOptions;\n    this.streamMode_ = pluginOptions.streamMode || 'BOTH';\n    this.logger_ = pluginOptions.logger || gulpLog;\n    this.PLUGIN_NAME_ = pluginOptions.pluginName || PLUGIN_NAME;\n\n    this.fileList_ = [];\n    this._streamInputRequired = pluginOptions.requireStreamInput !== false;\n  }\n  CompilationStream.prototype = Object.create(stream.Transform.prototype);\n\n  // Buffer the files into an array\n  CompilationStream.prototype.src = function() {\n    this._streamInputRequired = false;\n    process.nextTick((function() {\n      var stdInStream = new stream.Readable({ read: function() {\n        return new File();\n      }});\n      stdInStream.pipe(this);\n      stdInStream.push(null);\n    }).bind(this));\n    return this;\n  };\n\n  // Buffer the files into an array\n  CompilationStream.prototype._transform = function(file, enc, cb) {\n    // ignore empty files\n    if (file.isNull()) {\n      cb();\n      return;\n    }\n\n    if (file.isStream()) {\n      this.emit('error', new PluginError(this.PLUGIN_NAME_, 'Streaming not supported'));\n      cb();\n      return;\n    }\n\n    this.fileList_.push(file);\n    cb();\n  };\n\n  CompilationStream.prototype._flush = function(cb) {\n    var jsonFiles, logger = this.logger_.warn ? this.logger_.warn : this.logger_;\n    if (this.fileList_.length > 0) {\n      // Input files are present. Convert them to a JSON encoded string\n      jsonFiles = filesToJson(this.fileList_);\n    } else {\n      // If files in the stream were required, no compilation needed here.\n      if (this._streamInputRequired) {\n        this.emit('end');\n        cb();\n        return;\n      }\n\n      // The compiler will always expect something on standard-in. So pass it an empty\n      // list if no files were piped into this plugin.\n      jsonFiles = [];\n    }\n\n    var compiler = new Compiler(this.compilationOptions_, extraCommandArguments);\n\n    // Add the gulp-specific argument so the compiler will understand the JSON encoded input\n    // for gulp, the stream mode will be 'BOTH', but when invoked from grunt, we only use\n    // a stream mode of 'IN'\n    compiler.commandArguments.push('--json_streams', this.streamMode_);\n\n    var compilerProcess = compiler.run();\n\n    var stdOutData = '', stdErrData = '';\n\n    compilerProcess.stdout.on('data', function (data) {\n      stdOutData += data;\n    });\n    compilerProcess.stderr.on('data', function (data) {\n      stdErrData += data;\n    });\n\n    Promise.all([\n      new Promise(function(resolve) {\n        compilerProcess.on('close', function(code) {\n          resolve(code);\n        });\n      }),\n      new Promise(function(resolve) {\n        compilerProcess.stdout.on('end', function() {\n          resolve();\n        });\n      }),\n      new Promise(function(resolve) {\n        compilerProcess.stderr.on('end', function() {\n          resolve();\n        });\n      })\n    ]).then((function(results) {\n      var code = results[0];\n\n      // standard error will contain compilation warnings, log those\n      if (stdErrData.trim().length > 0) {\n        logger(chalk.yellow(this.PLUGIN_NAME_) + ': ' + stdErrData);\n      }\n\n      // non-zero exit means a compilation error\n      if (code !== 0) {\n        this.emit('error', new PluginError(this.PLUGIN_NAME_, 'Compilation error'));\n      }\n\n      // If present, standard output will be a string of JSON encoded files.\n      // Convert these back to vinyl\n      if (stdOutData.trim().length > 0) {\n        var outputFiles;\n        try {\n          outputFiles = jsonToVinyl(stdOutData);\n        } catch (e) {\n          this.emit('error', new PluginError(this.PLUGIN_NAME_, 'Error parsing json encoded files'));\n          cb();\n          return;\n        }\n\n        for (var i = 0; i < outputFiles.length; i++) {\n          if (outputFiles[i].sourceMap) {\n            if (outputFiles[i].sourceMap.sources) {\n              outputFiles[i].sourceMap.sources = outputFiles[i].sourceMap.sources.map(function(sourcePath) {\n                return path.isAbsolute(sourcePath[0]) ? sourcePath.substr(1) : sourcePath;\n              });\n            }\n            applySourceMap(outputFiles[i], outputFiles[i].sourceMap);\n          }\n          this.push(outputFiles[i]);\n        }\n      }\n      cb();\n    }).bind(this));\n\n    // Error events occur when there was a problem spawning the compiler process\n    compilerProcess.on('error', (function (err) {\n      this.emit('error', new PluginError(this.PLUGIN_NAME_,\n          'Process spawn error. Is java in the path?\\n' + err.message));\n      cb();\n    }).bind(this));\n\n    compilerProcess.stdin.on('error', (function(err) {\n      this.emit('Error', new PluginError(this.PLUGIN_NAME_,\n          'Error writing to stdin of the compiler.\\n' + err.message));\n      cb();\n    }).bind(this));\n    \n    var stdInStream = new stream.Readable({ read: function() {}});\n    stdInStream.pipe(compilerProcess.stdin);\n    stdInStream.push(JSON.stringify(jsonFiles));\n    stdInStream.push(null);\n  };\n\n\n  return function (compilationOptions, pluginOptions) {\n    return new CompilationStream(compilationOptions, pluginOptions);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-google-closure-compiler/google-closure-compiler/lib/node/closure-compiler.js":"/*\n * Copyright 2015 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Low level class for calling the closure-compiler jar\n * from nodejs\n *\n * @author Chad Killingsworth (chadkillingsworth@gmail.com)\n */\n\n'use strict';\n\nvar spawn = require('child_process').spawn;\nvar compilerPath = require.resolve('../../compiler.jar');\nvar path = require('path');\nvar contribPath = path.dirname(compilerPath) + '/contrib';\n\n/**\n * @constructor\n * @param {Object<string,string>|Array<string>} args\n * @param {Array<String>=} extraCommandArgs\n */\nfunction Compiler(args, extraCommandArgs) {\n  this.commandArguments = (extraCommandArgs || []).slice();\n\n  if (Compiler.JAR_PATH) {\n    this.commandArguments.push('-jar', Compiler.JAR_PATH);\n  }\n\n  if (Array.isArray(args)) {\n    this.commandArguments = this.commandArguments.concat(args.slice());\n  } else {\n    for (var key in args) {\n      if (Array.isArray(args[key])) {\n        for (var i = 0; i < args[key].length; i++) {\n          this.commandArguments.push(\n              this.formatArgument(key, args[key][i]));\n        }\n      } else {\n        this.commandArguments.push(\n            this.formatArgument(key, args[key]));\n      }\n    }\n  }\n}\n\n/**\n * @const\n * @type {string}\n */\nCompiler.JAR_PATH = compilerPath;\n\n/**\n * @type {string}\n */\nCompiler.prototype.javaPath = 'java';\n\n/** @type {function(...*)|null} */\nCompiler.prototype.logger = null;\n\n/** @type {Object<string, string>} */\nCompiler.prototype.spawnOptions = undefined;\n\n/**\n * @param {function(number, string, string)=} callback\n * @return {child_process.ChildProcess}\n */\nCompiler.prototype.run = function(callback) {\n  if (this.logger) {\n    this.logger(this.getFullCommand() + '\\n');\n  }\n\n  var compileProcess = spawn(this.javaPath, this.commandArguments, this.spawnOptions);\n\n  var stdOutData = '', stdErrData = '';\n  if (callback) {\n    compileProcess.stdout.on('data', function (data) {\n      stdOutData += data;\n    });\n\n    compileProcess.stderr.on('data', function (data) {\n      stdErrData += data;\n    });\n\n    compileProcess.on('close', (function (code) {\n      if (code !== 0) {\n        stdErrData = this.prependFullCommand(stdErrData);\n      }\n\n      callback(code, stdOutData, stdErrData);\n    }).bind(this));\n\n    compileProcess.on('error', (function (err) {\n      callback(1, stdOutData,\n          this.prependFullCommand('Process spawn error. Is java in the path?\\n' + err.message));\n    }).bind(this));\n  }\n\n  return compileProcess;\n};\n\n/** @type {string} */\nCompiler.COMPILER_PATH = compilerPath;\n\n/** @type {string} */\nCompiler.CONTRIB_PATH = contribPath;\n\n/**\n * @return {string}\n */\nCompiler.prototype.getFullCommand = function() {\n  return this.javaPath + ' ' + this.commandArguments.join(' ');\n};\n\n/**\n * @param {string} msg\n * @return {string}\n */\nCompiler.prototype.prependFullCommand = function(msg) {\n  return this.getFullCommand() + '\\n\\n' + msg + '\\n\\n';\n};\n\n/**\n * @param {string} key\n * @param {(string|boolean)=} val\n * @return {string}\n */\nCompiler.prototype.formatArgument = function(key, val) {\n  if (val === undefined || val === null) {\n    return '--' + key;\n  }\n\n  return '--' + key + '=' + val;\n};\n\nmodule.exports = Compiler;\n"}